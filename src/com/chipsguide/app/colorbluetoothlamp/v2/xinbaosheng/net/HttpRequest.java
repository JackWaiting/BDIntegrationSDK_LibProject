package com.chipsguide.app.colorbluetoothlamp.v2.xinbaosheng.net;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.Iterator;import java.util.Map;import java.util.Set;import android.annotation.SuppressLint;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;/** */@SuppressLint("HandlerLeak") public class HttpRequest extends Thread {	private HttpHandler httpHandler = null;	private static final int HTTP_START = 100;	private static final int HTTP_OK = 101;	private static final int HTTP_FAIL = 102;	private static final int HTTP_CANCEL = 103;	private static final String TAG = "HttpRequest";	private String url = null;	private Map<String, String> paramsMap = null;	private boolean isPost = false;	private HttpCallback onCallback = null;	private String threadName;	private String encode = "UTF-8";	private boolean canceld = false;	private boolean debug = false;	private String applogin = null;	private boolean running = false;	private HttpType type;	/**	 * 构造函数	 * 	 * @param url	 *            请求地址	 * @param paramsMap	 *            请求参数	 */	public HttpRequest(String url, HttpType type, Map<String, String> paramsMap) {		this.url = url;		this.paramsMap = paramsMap;		this.type = type;		this.threadName = this.getId() + "";		this.init();	}	/**	 * 构造函数	 * 	 * @param threadName	 *            线程名称，当不需要判断当前任务的线程ID时，可以不传递该参数	 * @param url	 *            请求地址	 * @param paramsMap	 *            请求参数	 */	public HttpRequest(String threadName, String url, HttpType type,			Map<String, String> paramsMap) {		super(threadName);		this.threadName = threadName;		this.url = url;		this.paramsMap = paramsMap;		this.type = type;		this.init();	}	private void init() {		httpHandler = new HttpHandler();	}	/**	 * running	 * 	 * @return the running	 */	public boolean isRunning() {		return running;	}	/**	 * @param running	 *            the running to set	 */	public void setRunning(boolean running) {		this.running = running;	}	/**	 * applogin	 * 	 * @return the applogin	 */	public String getApplogin() {		return applogin;	}	/**	 * @param applogin	 *            the applogin to set	 */	public void setApplogin(String applogin) {		this.applogin = applogin;	}	/**	 * debug	 * 	 * @return the debug	 */	public boolean isDebug() {		return debug;	}	/**	 * @param debug	 *            the debug to set	 */	public void setDebug(boolean debug) {		this.debug = debug;	}	/**	 * canceld	 * 	 * @return the canceld	 */	public boolean isCanceld() {		return canceld;	}	/**	 * 取消请求	 */	public void cancel() {		this.canceld = true;	}	/**	 * 设置当前是否为post请求，默认为get方法请求	 * 	 * @param isPost	 */	public void setPost(boolean isPost) {		this.isPost = isPost;	}	/**	 * encode	 * 	 * @return the encode	 */	public String getEncode() {		return encode;	}	/**	 * @param encode	 *            the encode to set	 */	public void setEncode(String encode) {		this.encode = encode;	}	@Override	public void run() {		running = true;			if (null != paramsMap) {			httpHandler.sendEmptyMessage(HTTP_START);			HttpURLConnection conn = null;			StringBuffer resultData = new StringBuffer();			ByteArrayOutputStream data = null;			InputStream is = null;			boolean isSuccess = false;			try {				if (!isPost&&paramsMap!=null&&paramsMap.size()>0) {					url = url+"&" + buildParams(paramsMap);				}				Log.d(TAG, ">>>>url = " + url);				conn = (HttpURLConnection) new URL(url).openConnection();				String method = (isPost) ? "POST" : "GET";				conn.setRequestMethod(method);				conn.setRequestProperty("User-Agent", "Android");				conn.setRequestProperty("Connection", "Keep-Alive");				if (!TextUtils.isEmpty(applogin)) {					conn.setRequestProperty("Cookie", applogin);				}				conn.setConnectTimeout(30 * 1000);				conn.setReadTimeout(35 * 1000);				conn.setInstanceFollowRedirects(true);				conn.setDoOutput(isPost);				conn.setDoInput(true);				conn.connect();				if (!canceld) {					if (isPost) {						String value = "";						OutputStream outStream = conn.getOutputStream();						value = buildParams(paramsMap);						outStream.write(value.getBytes());						outStream.flush();						outStream.close();					}					int code = conn.getResponseCode();					if (code == 302) {						String location = conn.getHeaderField("location");						this.url = location;						run();						return;					}					if (code == 200) {						setApplogin(conn.getHeaderField("Set-Cookie"));						is = conn.getInputStream();						data = new ByteArrayOutputStream();						int read = 0;						byte[] buffer = new byte[128];						while (!canceld && (read = is.read(buffer)) > 0) {							data.write(buffer, 0, read);						}						resultData.append(data.toString(encode));						if (!canceld) {							isSuccess = true;						}					} else {						// resultData.append("request error, the code is ---> "						// + code);					}				}			} catch (MalformedURLException e1) {				// resultData.append(e1.toString());			} catch (UnsupportedEncodingException e2) {				// /resultData.append(e2.toString());			} catch (Exception e3) {				// /resultData.append(e3.toString());			} finally {				try {					if (null != data) {						data.flush();						data.close();					}					if (is != null) {						is.close();					}				} catch (IOException e) {					// resultData.append(e.toString());				}				if (conn != null) {					conn.disconnect();					conn = null;				}			}			if (!canceld) {				String respond = resultData.toString();				Message msg = new Message();				msg.obj = respond;				msg.what = (isSuccess) ? HTTP_OK : HTTP_FAIL;				httpHandler.sendMessage(msg);			} else {				httpHandler.sendEmptyMessage(HTTP_CANCEL);			}		} else {			throw new RuntimeException("the paramsMap is null !");		}		running = false;	}	/**	 * 获取当前回调接口	 * 	 * @return the onCallback	 */	public void removeHttpCallback() {		if (null != onCallback) {			onCallback = null;		}	}	/**	 * 添加网络请求后的回调接口	 * 	 * @param onCallback	 *            the onCallback to set	 * @see HttpCallback	 */	public void setHttpCallback(HttpCallback httpCallback) {		this.onCallback = httpCallback;	}	private class HttpHandler extends Handler {		@Override		public void handleMessage(Message msg) {			if (null != onCallback) {				if (msg.what == HTTP_START) {					onCallback.onStart(threadName);				} else if (msg.what == HTTP_CANCEL) {					onCallback.onCancel(threadName);				} else {					String respond = msg.obj.toString();					boolean isSuccess = (msg.what == HTTP_OK);					onCallback.onFinish(isSuccess, respond, type, threadName);				}			}		}	}	/**	 * 组装参数Map	 * 	 * @param paramsMap	 * @return String	 */	private String buildParams(Map<String, String> paramsMap) {		if (paramsMap == null || paramsMap.size() == 0) {			return "";		}		StringBuilder params = new StringBuilder();		Set<String> keySet = paramsMap.keySet();		Iterator<String> iterator = keySet.iterator();		while (iterator.hasNext()) {			String key = iterator.next();			String value = paramsMap.get(key);			params.append(key + "=" + encode(value) + "&");			//params.append(key + "=" + value + "&");		}		Log.i(TAG,				"final >> paramsMap >>> : "						+ params.toString().substring(0,								params.toString().length() - 1));		return params.toString().substring(0, params.toString().length() - 1);	}	/**	 * 对参数进行转码	 * 	 * @param value	 * @return String	 */	private String encode(String value) {		String encoded = null;		try {			encoded = URLEncoder.encode(value, "UTF-8");		} catch (UnsupportedEncodingException ignore) {		}		StringBuffer buf = new StringBuffer(encoded.length());		char focus;		for (int i = 0; i < encoded.length(); i++) {			focus = encoded.charAt(i);			if (focus == '*') {				buf.append("%2A");			} else if (focus == '+') {				buf.append("%20");			} else if (focus == '%' && (i + 1) < encoded.length()					&& encoded.charAt(i + 1) == '7'					&& encoded.charAt(i + 2) == 'E') {				buf.append('~');				i += 2;			} else if (focus == '%' && (i + 1) < encoded.length()					&& encoded.charAt(i + 1) == '7'					&& encoded.charAt(i + 2) == 'C') {				buf.append('|');				i += 2;			} else {				buf.append(focus);			}		}		return buf.toString();	}}