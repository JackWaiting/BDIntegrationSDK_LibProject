package com.chipsguide.app.colorbluetoothlamp.v2.net;import java.util.HashMap;import java.util.Map;import android.content.Context;import android.util.Log;/** *  *  */public final class HttpFactory {	private final static String ENCODE = "UTF-8";	/** 每页默认请求的数量 */	public final static int COUNT = 20;	public final static String PHONE_TYPE = "android";	public final static String EQUTYPE = "phone";	public final static String SOFTWARETYPE = "CloudMusicChipsguide";	private static final String TAG = "HttpFactory";	private HttpFactory() {	}	/**	 * 网络请求	 * 	 * @param callback	 *            回调接口 {@link #HttpCallback}	 * @param type	 *            请求类型 {@link #HttpType}	 * @param params	 *            包含请求参数的Map对象	 * @return HttpRequest	 * @param name	 *            任命名称	 * 	 * @see HttpRequest	 * @see HttpType	 * @see HttpCallback	 */	private static HttpRequest request(Context context, HttpCallback callback,			HttpType type, Map<String, String> params, String name,			boolean isPost) {		if (null != params) {			HttpRequest http = null;			if (null != name && name.length() != 0) {				http = new HttpRequest(name, HttpConfig.url(type), type, params);			} else {				Log.i(TAG, "type: " + type);				Log.i(TAG, "type bool: " + (type == HttpType.GET_VERSION));				// 判断如果是版本更新接口,走李文杰接口				if (type == HttpType.GET_VERSION) {					http = new HttpRequest(HttpConfig.GETVERSION_HOST,							type, params);				} else {					http = new HttpRequest(HttpConfig.url(type), type, params);				}			}			http.setPost(isPost);			http.setEncode(ENCODE);			http.setHttpCallback(callback);			http.start();			return http;		}		return null;	}	/**	 * 获取分类列表	 * 	 * @param context	 * @param callback	 * @return	 */	public static HttpRequest getColumnList(Context context,			HttpCallback callback) {		Map<String, String> params = new HashMap<String, String>();		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback, HttpType.GET_COLUMLIST,				params, null, false);	}		/**	 * 搜索专辑列表	 * 	 * @return	 */	public static HttpRequest getSpecialByname(Context context,			HttpCallback callback, String name, int page, int limit) {		Map<String, String> params = new HashMap<String, String>();		params.put("name", name);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback,				HttpType.GET_SPECIALBYNAME, params, null, false);	}	/**	 * 搜索歌曲列表	 * 	 * @return	 */	public static HttpRequest getMusicByname(Context context,			HttpCallback callback, String name, int page, int limit) {		Map<String, String> params = new HashMap<String, String>();		params.put("name", name);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback, HttpType.GET_MUSICBYNAME,				params, null, false);	}	/**	 * 获得专辑列表	 * 	 * @return	 */	public static HttpRequest getSpecialList(Context context,			HttpCallback callback, String code, int page, int limit) {		Map<String, String> params = new HashMap<String, String>();		// params.put("column_id", column_id);		params.put("code", code);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback, HttpType.GET_SPECIALLIST,				params, null, false);	}	/**	 * 搜索专辑列表	 * 	 * @return	 */	public static HttpRequest searchMusicBySpecial(Context context,			HttpCallback callback, String type, String name, int page, int limit) {		Map<String, String> params = new HashMap<String, String>();		// params.put("column_id", column_id);		params.put("type", type);		params.put("name", name);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback,				HttpType.SEARCH_MUSICBYSPECIAL, params, null, false);	}	/**	 * 搜索歌曲	 * 	 * @return	 */	public static HttpRequest searchMusicByname(Context context,			HttpCallback callback, String type, String name, int page, int limit) {		Map<String, String> params = new HashMap<String, String>();		// params.put("column_id", column_id);		params.put("type", type);		params.put("name", name);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		// params.put("client_sign", client_sign);		return HttpFactory.request(context, callback,				HttpType.SEARCH_MUSICBYNAME, params, null, false);	}	public static HttpRequest getMusicBySpecial(Context context,			HttpCallback callback, String type, String special_id, int page,			int limit) {		Map<String, String> params = new HashMap<String, String>();		params.put("type", type);		params.put("special_id", special_id);		params.put("page", String.valueOf(page));		params.put("limit", String.valueOf(limit));		return HttpFactory.request(context, callback,				HttpType.GET_MUSICBYSPECIAL, params, null, false);	}}