package com.chipsguide.app.colorbluetoothlamp.v2.utils;import android.content.Context;import com.chipsguide.app.colorbluetoothlamp.v2.application.CustomApplication;import com.chipsguide.lib.bluetooth.extend.devices.BluetoothDeviceColorLampManager;import com.chipsguide.lib.bluetooth.extend.devices.BluetoothDeviceColorLampManager.OnBluetoothDeviceColorLampStatusChangedListener;import com.chipsguide.lib.bluetooth.extend.devices.BluetoothDeviceCommonLampManager;import com.chipsguide.lib.bluetooth.extend.devices.BluetoothDeviceCommonLampManager.OnBluetoothDeviceCommonLampStatusChangedListener;import com.chipsguide.lib.bluetooth.interfaces.callbacks.OnBluetoothDeviceManagerReadyListener;import com.chipsguide.lib.bluetooth.managers.BluetoothDeviceManager;public class LampManager implements OnBluetoothDeviceManagerReadyListener,		OnBluetoothDeviceCommonLampStatusChangedListener,		OnBluetoothDeviceColorLampStatusChangedListener {	private static LampManager mLampManager;	private Context mContext;	private BluetoothDeviceManager mBluetoothDeviceManager;	private BluetoothDeviceCommonLampManager mBluetoothDeviceCommonLampManager;	private BluetoothDeviceColorLampManager mBluetoothDeviceColorLampManager;	private LampManager(Context context)	{		mContext = context;	}	public static LampManager getInstance(Context context)	{		if (mLampManager == null)		{			mLampManager = new LampManager(context);		}		return mLampManager;	}	public void init()	{		mBluetoothDeviceManager = ((CustomApplication) mContext				.getApplicationContext()).getBluetoothDeviceManager();		mBluetoothDeviceManager.setOnBluetoothDeviceManagerReadyListener(this);	}	@Override	public void onBluetoothDeviceManagerReady()	{		mBluetoothDeviceCommonLampManager = mBluetoothDeviceManager				.getBluetoothDeviceCommonLampManager();		mBluetoothDeviceColorLampManager = mBluetoothDeviceManager				.getBluetoothDeviceColorLampManager();		mBluetoothDeviceColorLampManager				.setOnBluetoothDeviceColorLampStatusChangedListener(this);		mBluetoothDeviceCommonLampManager				.setOnBluetoothDeviceCommonLampStatusChangedListener(this);		mBluetoothDeviceCommonLampManager.getLampstatus();		mBluetoothDeviceColorLampManager.getStatus();	}		/**	 * commandType 是反馈还是查询 on 彩灯开关 colorlamp on-off brightness 彩灯亮度 （彩灯亮度不变化）	 * red green blue RGB值 rhythm 灯效	 */	@Override	public void onBluetoothDeviceColorLampStatusChanged(int commandType,			boolean on, int brightness, int red, int green, int blue, int rhythm)	{	}	/**	 * commandType 反馈or查询	 * on 白灯开关	 * brightness 白灯开关	 */	@Override	public void onBluetoothDeviceCommonLampStatusChanged(int commandType,			boolean on, int brightness)	{	}		public void setColor(int red ,int green,int blue)	{		if (mBluetoothDeviceColorLampManager != null)		{			mBluetoothDeviceColorLampManager.setColor(red, green, blue);		}	}		public void turnOn()	{		if (mBluetoothDeviceColorLampManager != null)		{			mBluetoothDeviceColorLampManager.turnOn();		}	}		public void turnOff()	{		if (mBluetoothDeviceColorLampManager != null)		{			mBluetoothDeviceColorLampManager.turnOff();		}	}}